package io.infinitestrike.editor.dialog;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import io.infinitestrike.core.Console;
import io.infinitestrike.core.Core;
import io.infinitestrike.core.Vector.Vector2i;
import io.infinitestrike.flatpixelutls.Loader;
import io.infintestrike.editor.EditorWindow;
import io.infintestrike.editor.Settings;
import io.infintestrike.editor.core.ResourceManager;
import io.infintestrike.utils.TextFromFile;

public class Debugger extends JPanel {

	/**
	 * Create the panel.
	 */
	
	String[] fileNames = this.getLogFiles();
	private JTextField textField;
	private JFrame parent = null;
	
	private static JFrame openFrame = null;
	
	public Debugger() {
		setLayout(new BorderLayout(0, 0));
		
		JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);
		add(tabbedPane);
		
		JPanel panel_2 = new JPanel();
		tabbedPane.addTab(Settings.getLanguage().getValue("$DIALOG_DEBUGGER_TAB_CONSOLE"), null, panel_2, null);
		panel_2.setLayout(new BorderLayout(0, 0));
		
		JPanel scrollPane = new JPanel();
		panel_2.add(scrollPane);
		scrollPane.setLayout(new BorderLayout());
		OutputConsole.getConsole().attach(scrollPane,BorderLayout.CENTER);
		
		JPanel panel_3 = new JPanel();
		panel_2.add(panel_3, BorderLayout.SOUTH);
		panel_3.setLayout(new BorderLayout(0, 0));
		
		textField = new JTextField();
		textField.addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(KeyEvent e) {
				if(e.getKeyCode() == KeyEvent.VK_ENTER) {
					processCommand();
				}
			}
		});
		panel_3.add(textField, BorderLayout.CENTER);
		textField.setColumns(10);
		
		JButton btnNewButton = new JButton(Settings.getLanguage().getValue("$DIALOG_DEBUGGER_BUTTON_CONSOLE_SEND"));
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				processCommand();
			}
		});
		panel_3.add(btnNewButton, BorderLayout.EAST);
		
		JPanel panel = new JPanel();
		tabbedPane.addTab(Settings.getLanguage().getValue("$DIALOG_DUBUGGER_TAB_LOG"), null, panel, null);
		panel.setLayout(new BorderLayout(0, 0));
		
		JPanel panel_1 = new JPanel();
		panel.add(panel_1, BorderLayout.NORTH);
		panel_1.setLayout(new BorderLayout(0, 0));
		
		JScrollPane scrollPane_1 = new JScrollPane();
		panel.add(scrollPane_1, BorderLayout.CENTER);
		JTextArea textArea_1 = new JTextArea();
		textArea_1.setEditable(false);
		textArea_1.setBackground(new Color(Loader.getValueHex(Settings.settingsFile.valueOf("$CONSOLE_COLOR_BACKGROUND", "3e3e3e"))));
		textArea_1.setForeground(new Color(Loader.getValueHex(Settings.settingsFile.valueOf("$CONSOLE_COLOR_FOREGROUND", "888888"))));
		scrollPane_1.setViewportView(textArea_1);
		
		JComboBox<String> comboBox = new JComboBox<String>();
		comboBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String filePath = Console.logDirectory.getPath() + "/" +fileNames[comboBox.getSelectedIndex()];
				if(comboBox.getSelectedIndex() > 0) {
					textArea_1.setText("");
					String prePend = "// Generated By Debugger, Log File. \n";
					prePend += "File: " + filePath + "; file-size: " + Core.getFileSize(new File(filePath)) + "\n";
					prePend += "===============================================\n\n";
					try {
						textArea_1.setText(prePend + TextFromFile.getText(new File(filePath)));
					} catch (FileNotFoundException e1) {
						// TODO Auto-generated catch block
						Console.Error("Cannot Load File", e1);
					}
				}
			}
		});
		comboBox.setModel(new DefaultComboBoxModel(this.fileNames));
		panel_1.add(comboBox, BorderLayout.CENTER);
		
		JLabel lblLogFile = new JLabel(Settings.getLanguage().getValue("$DIALOG_DEBUGGER_LABEL_LOGFILE"));
		panel_1.add(lblLogFile, BorderLayout.WEST);
		
		JButton btnDelete = new JButton(Settings.getLanguage().getValue("$DIALOG_DEBUGGER_BUTTON_LOG_DELETE"));
		btnDelete.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String filePath = Console.logDirectory.getPath() + "/" +fileNames[comboBox.getSelectedIndex()];
				if(comboBox.getSelectedIndex() > 0) {
					int option = JOptionPane.showConfirmDialog(
							Debugger.this, 
							//"Are you sure you want to delete " + fileNames[comboBox.getSelectedIndex()] + "?", 
							String.format(Settings.getLanguage().getValue("$DIALOG_DEBUGGER_LOG_DELETE_CONFIRM"), fileNames[comboBox.getSelectedIndex()]),
							Settings.getLanguage().getValue("$GENERIC_DELETE_FILE"), 
							JOptionPane.YES_NO_OPTION);
					
					if(option == JOptionPane.OK_OPTION) {
						try {
							Files.delete(Paths.get(filePath));
							JOptionPane.showMessageDialog(Debugger.this, Settings.getLanguage().getValue("$GENERIC_DELETE_SUCCESS"), Settings.getLanguage().getValue("$GENERIC_SUCCESS"), JOptionPane.INFORMATION_MESSAGE);
							fileNames = getLogFiles();
							comboBox.setModel(new DefaultComboBoxModel<String>(fileNames));
														
							textArea_1.setText(Settings.getLanguage().getValue("$DIALOG_DEBUGGER_LOG_FILENOSELECT"));
						}catch(Exception ef) {
							Console.Error("Cannot Delete File", ef);
							JOptionPane.showMessageDialog(Debugger.this, String.format(Settings.getLanguage().getValue("$DIALOG_DEBUGGER_LOG_DELETE_ERROR"), ef.getMessage()), Settings.getLanguage().getValue("$GENERIC_DELETE_FAIL"), JOptionPane.ERROR_MESSAGE);
						}
					}
					
				}
			}
		});
		panel_1.add(btnDelete, BorderLayout.EAST);
	}

	public void processCommand() {
		String[] command = textField.getText().split(" ");
		String com = command[0];
		String[] args = new String[command.length - 1];
		System.arraycopy(command, 1, args, 0, args.length);
		
		try {
			CommandProcessor.runCommand(com, args);
		}catch(Exception e) {
			Console.Error("Error With Command: ", e);
		}
		textField.setText("");
	}
	
	public static void Spawn() {
		if(openFrame != null) {
			openFrame.requestFocus();
			return;
		}
		Debugger d = new Debugger();
		JFrame frame = Core.spawnFrame(d, Settings.getLanguage().getValue("$DIALOG_DEBUGGER_TITLE"), new Vector2i(640,400),null, true, false);
		frame.setIconImage(ResourceManager.APPLICATION_ICONS.getSubimage(0, 0, 64, 64));
		frame.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				openFrame = null;
				Console.Save();
			}
		});
		frame.setVisible(true);
		openFrame = frame;
	}
	
	public String[] getLogFiles() {
		File logDir = Console.logDirectory;
		ArrayList<String> fileNames = new ArrayList<String>();
		if(logDir.isDirectory()) {
			File[] files = logDir.listFiles();
			fileNames.add(Settings.getLanguage().getValue("$DIALOG_DEBUGGER_LOG_FILENOSELECT"));
			for(int i = 1; i < files.length; i++) {
				String name = files[i - 1].getName();
				if(name.equals(Console.getCurrentFileName())) continue;
				fileNames.add(name);
			}
		}
		
		String[] names = new String[fileNames.size()];
		for(int i = 0 ; i < fileNames.size(); i++) names[i] = fileNames.get(i);
		
		return names;
	}
	
	public void setParent(JFrame f) {
		this.parent = f;
	}
	
	public static class CommandProcessor{
		public static void runCommand(String command, String... args) throws Exception{
			if(command == "" || command.isEmpty()) return;
			Console.Log("User Typed Command: " + command);
			int argLength = args.length;
			switch(command.toLowerCase()) {
				case "/print":
					String message = "";
					for(String s : args) message += s + " ";
					Console.Log(message);
					break;
				case "/input":
					Console.Log("Current Input of the Main Editor: \n\n\n");
					String iman = EditorWindow.currentEditor.getParent().getInputManager().toString();
					Console.Log(iman);
					break;
				case "/clear":
					OutputConsole.getConsole().clear();
					break;
				case "/gettileid":
					int x = Integer.parseInt(args[0]);
					int y = Integer.parseInt(args[1]);
					int index = EditorWindow.currentEditor.getMap().getTileMap().getTile(x, y).id;
					Console.Log("Tile at Location ["+x+","+y+"] is: " + index);
					break;
				case "/dumpsettings":
					Console.Log(Loader.LoaderResultToString(Settings.settingsFile));
					break;
				default:
					Console.Log("Unknown Command: '" + command+ "'. Commands all start with '/'");
					break;
			}
		}
	}
}
